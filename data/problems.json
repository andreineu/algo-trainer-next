[
    {
        "id": "two-sum",
        "slug": "two-sum",
        "title": "Two Sum",
        "difficulty": "Easy",
        "descriptionMd": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Assume exactly one solution.",
        "functionName": "twoSum",
        "starterCode": "/**\n * Given an array of integers and a target, return indices of the two numbers that add up to the target.\n */\nexport default function twoSum(nums, target) {\n    return [];\n}\n",
        "tests": [
            { "input": { "nums": [2, 7, 11, 15], "target": 9 }, "output": [0, 1] },
            { "input": { "nums": [3, 2, 4], "target": 6 }, "output": [1, 2] },
            { "input": { "nums": [3, 3], "target": 6 }, "output": [0, 1] }
        ]
    },
    {
        "id": "valid-palindrome",
        "slug": "valid-palindrome",
        "title": "Valid Palindrome",
        "difficulty": "Easy",
        "descriptionMd": "Return true if a given string is a palindrome, considering only alphanumeric characters and ignoring case.",
        "functionName": "isPalindrome",
        "starterCode": "/**\n * Check if a given string is a palindrome, ignoring non-alphanumeric characters and case.\n */\nexport default function isPalindrome(s) {\n    return false;\n}\n",
        "tests": [
            { "input": { "s": "A man, a plan, a canal: Panama" }, "output": true },
            { "input": { "s": "race a car" }, "output": false },
            { "input": { "s": " " }, "output": true }
        ]
    },
    {
        "id": "merge-intervals",
        "slug": "merge-intervals",
        "title": "Merge Intervals",
        "difficulty": "Medium",
        "descriptionMd": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals and return the resulting array of non-overlapping intervals.",
        "functionName": "merge",
        "starterCode": "/**\n * Merge overlapping intervals and return the resulting non-overlapping intervals.\n */\nexport default function merge(intervals) {\n    return [];\n}\n",
        "tests": [
            {
                "input": {
                    "intervals": [
                        [1, 3],
                        [2, 6],
                        [8, 10],
                        [15, 18]
                    ]
                },
                "output": [
                    [1, 6],
                    [8, 10],
                    [15, 18]
                ]
            },
            {
                "input": {
                    "intervals": [
                        [1, 4],
                        [4, 5]
                    ]
                },
                "output": [[1, 5]]
            }
        ]
    },
    {
        "id": "max-subarray",
        "slug": "max-subarray",
        "title": "Maximum Subarray",
        "difficulty": "Easy",
        "descriptionMd": "Find the contiguous subarray which has the largest sum and return its sum.",
        "functionName": "maxSubArray",
        "starterCode": "/**\n * Find the maximum sum of a contiguous subarray.\n */\nexport default function maxSubArray(nums) {\n    return 0;\n}\n",
        "tests": [
            { "input": { "nums": [-2, 1, -3, 4, -1, 2, 1, -5, 4] }, "output": 6 },
            { "input": { "nums": [1] }, "output": 1 },
            { "input": { "nums": [5, 4, -1, 7, 8] }, "output": 23 }
        ]
    },
    {
        "id": "contains-duplicate",
        "slug": "contains-duplicate",
        "title": "Contains Duplicate",
        "difficulty": "Easy",
        "descriptionMd": "Return true if any value appears at least twice in the array, false otherwise.",
        "functionName": "containsDuplicate",
        "starterCode": "/**\n * Determine if the array contains any duplicates.\n */\nexport default function containsDuplicate(nums) {\n    return false;\n}\n",
        "tests": [
            { "input": { "nums": [1, 2, 3, 1] }, "output": true },
            { "input": { "nums": [1, 2, 3, 4] }, "output": false },
            { "input": { "nums": [1, 1, 1, 3, 3, 4, 3, 2, 4, 2] }, "output": true }
        ]
    },
    {
        "id": "move-zeroes",
        "slug": "move-zeroes",
        "title": "Move Zeroes",
        "difficulty": "Easy",
        "descriptionMd": "Move all zeroes to the end of the array while maintaining the relative order of non-zero elements.",
        "functionName": "moveZeroes",
        "starterCode": "/**\n * Move all zeroes to the end while keeping non-zero elements in order.\n */\nexport default function moveZeroes(nums) {\n    return nums;\n}\n",
        "tests": [
            { "input": { "nums": [0, 1, 0, 3, 12] }, "output": [1, 3, 12, 0, 0] },
            { "input": { "nums": [0, 0, 1] }, "output": [1, 0, 0] }
        ]
    },
    {
        "id": "best-time-to-buy-sell-stock",
        "slug": "best-time-to-buy-sell-stock",
        "title": "Best Time to Buy and Sell Stock",
        "difficulty": "Easy",
        "descriptionMd": "Given an array prices where prices[i] is the price of a stock on the ith day, return the maximum profit you can achieve.",
        "functionName": "maxProfit",
        "starterCode": "/**\n * Find the maximum profit from a single buy and sell transaction.\n */\nexport default function maxProfit(prices) {\n    return 0;\n}\n",
        "tests": [
            { "input": { "prices": [7, 1, 5, 3, 6, 4] }, "output": 5 },
            { "input": { "prices": [7, 6, 4, 3, 1] }, "output": 0 }
        ]
    },
    {
        "id": "valid-parentheses",
        "slug": "valid-parentheses",
        "title": "Valid Parentheses",
        "difficulty": "Easy",
        "descriptionMd": "Given a string containing only parentheses characters, determine if the input string is valid.",
        "functionName": "isValid",
        "starterCode": "/**\n * Check if a string of parentheses is valid.\n */\nexport default function isValid(s) {\n    return false;\n}\n",
        "tests": [
            { "input": { "s": "()" }, "output": true },
            { "input": { "s": "()[]{}" }, "output": true },
            { "input": { "s": "(]" }, "output": false }
        ]
    },
    {
        "id": "fibonacci-number",
        "slug": "fibonacci-number",
        "title": "Fibonacci Number",
        "difficulty": "Easy",
        "descriptionMd": "Given n, calculate the nth Fibonacci number.",
        "functionName": "fib",
        "starterCode": "/**\n * Return the nth Fibonacci number.\n */\nexport default function fib(n) {\n    return 0;\n}\n",
        "tests": [
            { "input": { "n": 2 }, "output": 1 },
            { "input": { "n": 3 }, "output": 2 },
            { "input": { "n": 10 }, "output": 55 }
        ]
    },
    {
        "id": "climbing-stairs",
        "slug": "climbing-stairs",
        "title": "Climbing Stairs",
        "difficulty": "Easy",
        "descriptionMd": "You are climbing a staircase. It takes n steps to reach the top. Each time you can climb 1 or 2 steps. Return how many distinct ways to climb to the top.",
        "functionName": "climbStairs",
        "starterCode": "/**\n * Return the number of ways to climb to the top of a staircase.\n */\nexport default function climbStairs(n) {\n    return 0;\n}\n",
        "tests": [
            { "input": { "n": 2 }, "output": 2 },
            { "input": { "n": 3 }, "output": 3 }
        ]
    },
    {
        "id": "reverse-linked-list",
        "slug": "reverse-linked-list",
        "title": "Reverse Linked List",
        "difficulty": "Easy",
        "descriptionMd": "Reverse a singly linked list and return its head.",
        "functionName": "reverseList",
        "starterCode": "/**\n * Reverse a singly linked list.\n */\nexport default function reverseList(head) {\n    return head;\n}\n",
        "tests": [
            { "input": { "head": [1, 2, 3, 4, 5] }, "output": [5, 4, 3, 2, 1] },
            { "input": { "head": [1, 2] }, "output": [2, 1] },
            { "input": { "head": [] }, "output": [] }
        ]
    },
    {
        "id": "linked-list-cycle",
        "slug": "linked-list-cycle",
        "title": "Linked List Cycle",
        "difficulty": "Easy",
        "descriptionMd": "Determine if a linked list has a cycle.",
        "functionName": "hasCycle",
        "starterCode": "/**\n * Detect if a linked list has a cycle.\n */\nexport default function hasCycle(head) {\n    return false;\n}\n",
        "tests": [
            { "input": { "head": [3, 2, 0, -4], "pos": 1 }, "output": true },
            { "input": { "head": [1, 2], "pos": 0 }, "output": true },
            { "input": { "head": [1], "pos": -1 }, "output": false }
        ]
    },
    {
        "id": "binary-search",
        "slug": "binary-search",
        "title": "Binary Search",
        "difficulty": "Easy",
        "descriptionMd": "Implement binary search on a sorted array.",
        "functionName": "search",
        "starterCode": "/**\n * Perform binary search on a sorted array and return the index of the target.\n */\nexport default function search(nums, target) {\n    return -1;\n}\n",
        "tests": [
            { "input": { "nums": [-1, 0, 3, 5, 9, 12], "target": 9 }, "output": 4 },
            { "input": { "nums": [-1, 0, 3, 5, 9, 12], "target": 2 }, "output": -1 }
        ]
    },
    {
        "id": "rotate-array",
        "slug": "rotate-array",
        "title": "Rotate Array",
        "difficulty": "Medium",
        "descriptionMd": "Rotate the array to the right by k steps.",
        "functionName": "rotate",
        "starterCode": "/**\n * Rotate the array to the right by k steps.\n */\nexport default function rotate(nums, k) {\n    return nums;\n}\n",
        "tests": [
            { "input": { "nums": [1, 2, 3, 4, 5, 6, 7], "k": 3 }, "output": [5, 6, 7, 1, 2, 3, 4] },
            { "input": { "nums": [-1, -100, 3, 99], "k": 2 }, "output": [3, 99, -1, -100] }
        ]
    },
    {
        "id": "plus-one",
        "slug": "plus-one",
        "title": "Plus One",
        "difficulty": "Easy",
        "descriptionMd": "Given a non-empty array of decimal digits, increment the integer by one and return the resulting array of digits.",
        "functionName": "plusOne",
        "starterCode": "/**\n * Add one to a number represented as an array of digits.\n */\nexport default function plusOne(digits) {\n    return digits;\n}\n",
        "tests": [
            { "input": { "digits": [1, 2, 3] }, "output": [1, 2, 4] },
            { "input": { "digits": [4, 3, 2, 1] }, "output": [4, 3, 2, 2] },
            { "input": { "digits": [9] }, "output": [1, 0] }
        ]
    },
    {
        "id": "valid-anagram",
        "slug": "valid-anagram",
        "title": "Valid Anagram",
        "difficulty": "Easy",
        "descriptionMd": "Check if two strings are anagrams of each other.",
        "functionName": "isAnagram",
        "starterCode": "/**\n * Check if two strings are anagrams of each other.\n */\nexport default function isAnagram(s, t) {\n    return false;\n}\n",
        "tests": [
            { "input": { "s": "anagram", "t": "nagaram" }, "output": true },
            { "input": { "s": "rat", "t": "car" }, "output": false }
        ]
    },
    {
        "id": "longest-common-prefix",
        "slug": "longest-common-prefix",
        "title": "Longest Common Prefix",
        "difficulty": "Easy",
        "descriptionMd": "Find the longest common prefix string amongst an array of strings.",
        "functionName": "longestCommonPrefix",
        "starterCode": "/**\n * Find the longest common prefix among an array of strings.\n */\nexport default function longestCommonPrefix(strs) {\n    return \"\";\n}\n",
        "tests": [
            { "input": { "strs": ["flower", "flow", "flight"] }, "output": "fl" },
            { "input": { "strs": ["dog", "racecar", "car"] }, "output": "" }
        ]
    },
    {
        "id": "search-insert-position",
        "slug": "search-insert-position",
        "title": "Search Insert Position",
        "difficulty": "Easy",
        "descriptionMd": "Given a sorted array and a target value, return the index if found. If not, return the index where it would be inserted.",
        "functionName": "searchInsert",
        "starterCode": "/**\n * Return the index where the target fits in the sorted array.\n */\nexport default function searchInsert(nums, target) {\n    return 0;\n}\n",
        "tests": [
            { "input": { "nums": [1, 3, 5, 6], "target": 5 }, "output": 2 },
            { "input": { "nums": [1, 3, 5, 6], "target": 2 }, "output": 1 },
            { "input": { "nums": [1, 3, 5, 6], "target": 7 }, "output": 4 }
        ]
    }
]
