[
    {
        "id": "two-sum",
        "slug": "two-sum",
        "title": "Two Sum",
        "difficulty": "Easy",
        "descriptionMd": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target. Assume exactly one solution.",
        "functionName": "twoSum",
        "starterCode": "/**\n * Two Sum\n *\n * Given an array of integers nums and an integer target, return indices of\n * the two numbers such that they add up to target. Assume exactly one solution.\n *\n * @param {number[]} nums - Array of integers\n * @param {number} target - Target sum\n * @returns {number[]} Indices [i, j] where nums[i] + nums[j] === target\n */\nexport default function twoSum(nums, target) {\n    // TODO: Implement using a hash map to track seen values\n    // Example idea: for each number x, check if target - x was seen before.\n    return [];\n}\n",
        "tests": [
            { "input": { "nums": [2, 7, 11, 15], "target": 9 }, "output": [0, 1] },
            { "input": { "nums": [3, 2, 4], "target": 6 }, "output": [1, 2] },
            { "input": { "nums": [3, 3], "target": 6 }, "output": [0, 1] }
        ]
    },
    {
        "id": "valid-palindrome",
        "slug": "valid-palindrome",
        "title": "Valid Palindrome",
        "difficulty": "Easy",
        "descriptionMd": "Given a string s, return true if it is a palindrome, considering only alphanumeric characters and ignoring cases.",
        "functionName": "isPalindrome",
        "starterCode": "/**\n * Valid Palindrome\n *\n * Given a string s, return true if it is a palindrome, considering only\n * alphanumeric characters and ignoring cases.\n *\n * @param {string} s - Input string\n * @returns {boolean} Whether s is a palindrome (alphanumeric, case-insensitive)\n */\nexport default function isPalindrome(s) {\n    // TODO: Normalize by removing non-alphanumerics and lowercasing, then two-pointer compare\n    return false;\n}\n",
        "tests": [
            { "input": { "s": "A man, a plan, a canal: Panama" }, "output": true },
            { "input": { "s": "race a car" }, "output": false },
            { "input": { "s": " " }, "output": true }
        ]
    },
    {
        "id": "merge-intervals",
        "slug": "merge-intervals",
        "title": "Merge Intervals",
        "difficulty": "Medium",
        "descriptionMd": "Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals and return an array of the non-overlapping intervals.",
        "functionName": "merge",
        "starterCode": "/**\n * Merge Intervals\n *\n * Given an array of intervals where intervals[i] = [start_i, end_i],\n * merge all overlapping intervals and return the resulting non-overlapping set.\n *\n * @param {number[][]} intervals - Array of [start, end] pairs\n * @returns {number[][]} Merged, non-overlapping intervals\n */\nexport default function merge(intervals) {\n    // TODO: Sort by start, then iterate and merge when overlapping\n    return [];\n}\n",
        "tests": [
            {
                "input": {
                    "intervals": [
                        [1, 3],
                        [2, 6],
                        [8, 10],
                        [15, 18]
                    ]
                },
                "output": [
                    [1, 6],
                    [8, 10],
                    [15, 18]
                ]
            },
            {
                "input": {
                    "intervals": [
                        [1, 4],
                        [4, 5]
                    ]
                },
                "output": [[1, 5]]
            }
        ]
    }
]
